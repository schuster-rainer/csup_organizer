# Generated by Django 4.0.4 on 2022-05-29 09:39

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.expressions
import django.db.models.functions.text
import events.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('drivers', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('content', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='League',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the League without the season number', max_length=50, validators=[django.core.validators.MinLengthValidator(3), django.core.validators.MaxLengthValidator(50)])),
                ('abbreviation', models.CharField(max_length=10, unique=True, validators=[django.core.validators.MinLengthValidator(2), django.core.validators.MaxLengthValidator(10)])),
                ('season', models.PositiveSmallIntegerField(blank=True, help_text='Optional: Season of the League', validators=[django.core.validators.MaxValueValidator(1000)])),
                ('website', models.CharField(blank=True, max_length=500, validators=[django.core.validators.MaxLengthValidator(500), django.core.validators.URLValidator(schemes=['http', 'https'])])),
                ('description', models.TextField(max_length=10000, validators=[django.core.validators.MinLengthValidator(50), django.core.validators.MaxLengthValidator(10000)])),
                ('region', models.CharField(choices=[('world', 'World'), ('na', 'North America'), ('sa', 'South America'), ('na+sa', 'North and South America'), ('eu+na+sa', 'Europe, North and South America'), ('eu', 'Europe')], default='world', max_length=20)),
                ('allocates_penalties', models.BooleanField(default=False, help_text='Are penalties allocated in this league, if someone drives unsportmanlikely?')),
                ('points_p1', models.PositiveSmallIntegerField(default=20)),
                ('points_p2', models.PositiveSmallIntegerField(default=16)),
                ('points_p3', models.PositiveSmallIntegerField(default=14)),
                ('points_p4', models.PositiveSmallIntegerField(default=12)),
                ('points_p5', models.PositiveSmallIntegerField(default=10)),
                ('points_p6', models.PositiveSmallIntegerField(default=8)),
                ('points_p7', models.PositiveSmallIntegerField(default=6)),
                ('points_p8', models.PositiveSmallIntegerField(default=5)),
                ('points_p9', models.PositiveSmallIntegerField(default=4)),
                ('points_p10', models.PositiveSmallIntegerField(default=3)),
                ('points_p11', models.PositiveSmallIntegerField(default=2)),
                ('points_p12', models.PositiveSmallIntegerField(default=1)),
                ('points_pole', models.PositiveSmallIntegerField(default=1)),
                ('points_fastest_lap', models.PositiveSmallIntegerField(default=1)),
                ('points_for_attendance', models.BooleanField(default=False, help_text='Does someone get points, if he/she attended, but did not finish the quali/race? Quali finishers will go before those who dropped during Quali.')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('organizers', models.ManyToManyField(help_text='Choose who organizes this league. Those people can add races, enter results and edit the league.', related_name='leagues_organized', to=settings.AUTH_USER_MODEL)),
                ('previous_league_season', models.OneToOneField(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='next_league_season', to='events.league')),
            ],
            options={
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='Race',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField()),
                ('quali_type', models.CharField(choices=[('qualify', 'Qualify'), ('no_qualifiers', 'No Qualifiers'), ('reverse_grid', 'Reverse Grid')], default='qualify', max_length=20)),
                ('quali_duration_mode', models.CharField(choices=[('laps', 'Laps'), ('distance', 'Distance (km)'), ('duration', 'Duration (minutes)')], default='laps', max_length=20)),
                ('quali_duration', models.FloatField(default=1)),
                ('quali_collisions', models.CharField(choices=[('prevent_lapping_collisions', 'Prevent Lapping Collisions'), ('all', 'All'), ('prevent_all_collisions', 'Prevent All Collisions')], default='prevent_all_collisions', max_length=40)),
                ('race_duration_mode', models.CharField(choices=[('laps', 'Laps'), ('distance', 'Distance'), ('duration', 'Duration (minutes)')], default='laps', max_length=20)),
                ('race_duration', models.FloatField(default=15)),
                ('race_collisions', models.CharField(choices=[('prevent_lapping_collisions', 'Prevent Lapping Collisions'), ('all', 'All'), ('prevent_all_collisions', 'Prevent All Collisions')], default='prevent_lapping_collisions', max_length=40)),
                ('drafting', models.PositiveSmallIntegerField(choices=[(0, '0'), (25, '25'), (50, '50'), (75, '75'), (100, '100'), (125, '125'), (150, '150'), (175, '175'), (200, '200'), (250, '250'), (300, '300'), (350, '350'), (400, '400'), (450, '450'), (500, '500')], default=100, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(500)])),
                ('rubberband', models.PositiveSmallIntegerField(choices=[(0, '0'), (25, '25'), (50, '50'), (75, '75'), (100, '100'), (125, '125'), (150, '150'), (175, '175'), (200, '200'), (250, '250'), (300, '300'), (350, '350'), (400, '400'), (450, '450'), (500, '500')], default=0, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(500)])),
                ('tire_wear', models.PositiveSmallIntegerField(choices=[(0, '0'), (25, '25'), (50, '50'), (75, '75'), (100, '100'), (125, '125'), (150, '150'), (175, '175'), (200, '200'), (250, '250'), (300, '300'), (350, '350'), (400, '400'), (450, '450'), (500, '500')], default=100, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(500)])),
                ('fuel_consumption', models.PositiveSmallIntegerField(choices=[(0, '0'), (25, '25'), (50, '50'), (75, '75'), (100, '100'), (125, '125'), (150, '150'), (175, '175'), (200, '200'), (250, '250'), (300, '300'), (350, '350'), (400, '400'), (450, '450'), (500, '500')], default=100, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(500)])),
                ('damage_from_opponents', models.PositiveSmallIntegerField(choices=[(0, '0'), (25, '25'), (50, '50'), (75, '75'), (100, '100'), (125, '125'), (150, '150'), (175, '175'), (200, '200'), (250, '250'), (300, '300'), (350, '350'), (400, '400'), (450, '450'), (500, '500')], default=100, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(500)])),
                ('damage_from_environment', models.PositiveSmallIntegerField(choices=[(0, '0'), (25, '25'), (50, '50'), (75, '75'), (100, '100'), (125, '125'), (150, '150'), (175, '175'), (200, '200'), (250, '250'), (300, '300'), (350, '350'), (400, '400'), (450, '450'), (500, '500')], default=100, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(500)])),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('car', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='races', to='content.car')),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='races', to='events.league')),
                ('track', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='races', to='content.track')),
            ],
            options={
                'db_table': 'races',
                'ordering': ['league', 'datetime'],
            },
        ),
        migrations.CreateModel(
            name='SingleLeague',
            fields=[
                ('league_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='events.league')),
                ('points_calculation_type', models.CharField(choices=[('all', 'Points of every race count'), ('cut_worst', 'Do not use worst single/team result'), ('cut_two_worst', 'Do not use the two worst single/team results')], default='all', max_length=30)),
            ],
            options={
                'db_table': 'single_leagues',
            },
            bases=('events.league',),
        ),
        migrations.CreateModel(
            name='TeamLeague',
            fields=[
                ('league_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='events.league')),
                ('participants_per_team', models.PositiveSmallIntegerField(default=2, validators=[django.core.validators.MinLengthValidator(1), django.core.validators.MaxLengthValidator(12)])),
                ('max_number_of_reserve_drivers', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(12)])),
                ('points_calculation_type', models.CharField(choices=[('all', 'Points of every race count'), ('cut_worst', 'Do not use worst team result'), ('cut_two_worst', 'Do not use the two worst team results'), ('use_best', 'Only use best team result per race'), ('use_two_best', 'Only use the two best team results per race')], default='all', max_length=30)),
            ],
            options={
                'db_table': 'team_leagues',
            },
            bases=('events.league',),
        ),
        migrations.CreateModel(
            name='RaceResults',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attended_quali', models.BooleanField(blank=True)),
                ('quali_position', models.PositiveSmallIntegerField(blank=True, validators=[django.core.validators.MinLengthValidator(1), django.core.validators.MaxLengthValidator(12)])),
                ('quali_time_seconds', models.FloatField(blank=True, help_text='Please use the format 00:26.042', validators=[events.models.validate_time_format])),
                ('attended_race', models.BooleanField(default=True)),
                ('finished_race', models.BooleanField(default=True)),
                ('race_position', models.PositiveSmallIntegerField(blank=True, validators=[django.core.validators.MinLengthValidator(1), django.core.validators.MaxLengthValidator(12)])),
                ('race_time_seconds', models.FloatField(blank=True, help_text='Please use the format 15:58.042', validators=[events.models.validate_time_format])),
                ('lappings', models.PositiveSmallIntegerField(blank=True, help_text='How often has the driver been lapped?')),
                ('fastest_lap_seconds', models.FloatField(blank=True, help_text='Please use the format 00:25.042', validators=[events.models.validate_time_format])),
                ('driver', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='results', to='drivers.driver')),
                ('race', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='results', to='events.race')),
            ],
            options={
                'db_table': 'race_results',
                'ordering': ['race', 'driver', '-attended_race', '-finished_race', 'race_position'],
            },
        ),
        migrations.CreateModel(
            name='Penalty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('time', 'Time Penalty'), ('position', 'Position Penalty')], default='time', max_length=20)),
                ('number', models.FloatField(default=2, help_text="For time penalties use format '2.5' (for 2.5 seconds penalty), for positions use a simple digit.")),
                ('results', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='penalties', to='events.raceresults')),
            ],
            options={
                'db_table': 'penalties',
            },
        ),
        migrations.AddIndex(
            model_name='raceresults',
            index=models.Index(fields=['race'], name='race_result_race_id_9c27de_idx'),
        ),
        migrations.AddIndex(
            model_name='raceresults',
            index=models.Index(fields=['driver'], name='race_result_driver__e3df99_idx'),
        ),
        migrations.AddIndex(
            model_name='race',
            index=models.Index(fields=['league'], name='races_league__e82158_idx'),
        ),
        migrations.AddConstraint(
            model_name='race',
            constraint=models.UniqueConstraint(fields=('datetime', 'league'), name='unique_race_lower_name_season'),
        ),
        migrations.AlterOrderWithRespectTo(
            name='penalty',
            order_with_respect_to='results',
        ),
        migrations.AddIndex(
            model_name='penalty',
            index=models.Index(fields=['results'], name='penalties_results_2072e5_idx'),
        ),
        migrations.AddConstraint(
            model_name='league',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Lower('name'), django.db.models.expressions.F('season'), name='unique_league_lower_name_season'),
        ),
    ]
