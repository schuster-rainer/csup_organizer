# Generated by Django 4.0.4 on 2022-05-30 19:22

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.expressions
import django.db.models.functions.text


class Migration(migrations.Migration):

    dependencies = [
        ('drivers', '0002_initial'),
        ('content', '0001_initial'),
        ('teams', '0001_initial'),
        ('events', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.RemoveConstraint(
            model_name='league',
            name='unique_league_lower_name_season',
        ),
        migrations.RemoveField(
            model_name='league',
            name='points_for_attendance',
        ),
        migrations.RemoveField(
            model_name='race',
            name='car',
        ),
        migrations.AddField(
            model_name='league',
            name='allow_application_after_start',
            field=models.BooleanField(default=True, help_text='Can you still apply after the first race?'),
        ),
        migrations.AddField(
            model_name='league',
            name='finished',
            field=models.BooleanField(default=False, help_text='Has the league been finished? Set this to True after the last race.'),
        ),
        migrations.AddField(
            model_name='league',
            name='group',
            field=models.CharField(blank=True, help_text='Optional: Group', max_length=50, validators=[django.core.validators.MinLengthValidator(1), django.core.validators.MaxLengthValidator(50)]),
        ),
        migrations.AddField(
            model_name='league',
            name='number_demotion',
            field=models.PositiveSmallIntegerField(blank=True, default=0, help_text='Optional: How many drivers will be demoted to a lower group?', validators=[django.core.validators.MaxLengthValidator(12)]),
        ),
        migrations.AddField(
            model_name='league',
            name='number_promotion',
            field=models.PositiveSmallIntegerField(blank=True, default=0, help_text='Optional: How many drivers will be promoted or advance to higher group?', validators=[django.core.validators.MaxLengthValidator(12)]),
        ),
        migrations.AddField(
            model_name='race',
            name='cars',
            field=models.ManyToManyField(help_text='Choose the car(s) that are allowed for this race.', related_name='races_used', to='content.car'),
        ),
        migrations.AddField(
            model_name='raceresults',
            name='car',
            field=models.ForeignKey(default=0, on_delete=django.db.models.deletion.PROTECT, related_name='results', to='content.car'),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='league',
            name='abbreviation',
            field=models.CharField(max_length=10, validators=[django.core.validators.MinLengthValidator(2), django.core.validators.MaxLengthValidator(10)]),
        ),
        migrations.AlterField(
            model_name='league',
            name='name',
            field=models.CharField(help_text='Full name of the league without the group and season number, see below. Needs to be unique together with group and season.', max_length=50, validators=[django.core.validators.MinLengthValidator(3), django.core.validators.MaxLengthValidator(50)]),
        ),
        migrations.AlterField(
            model_name='league',
            name='website',
            field=models.CharField(blank=True, help_text='Optional: Wesbite of the League', max_length=500, validators=[django.core.validators.MaxLengthValidator(500), django.core.validators.URLValidator(schemes=['http', 'https'])]),
        ),
        migrations.AlterField(
            model_name='penalty',
            name='number',
            field=models.FloatField(blank=True, default=2, help_text="For time penalties use format '2.5' (for 2.5 seconds penalty), for positions use a simple digit. Empty for 'Disqualified'."),
        ),
        migrations.AlterField(
            model_name='penalty',
            name='type',
            field=models.CharField(choices=[('time', 'Time Penalty'), ('position', 'Position Penalty'), ('disqualified', 'Disqualified')], default='time', max_length=20),
        ),
        migrations.AddConstraint(
            model_name='league',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Lower('name'), django.db.models.functions.text.Lower('group'), django.db.models.expressions.F('season'), name='unique_league_lower_name_group_season'),
        ),
        migrations.AddField(
            model_name='application',
            name='league',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='applications', to='events.league'),
        ),
        migrations.CreateModel(
            name='TeamApplication',
            fields=[
                ('application_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='events.application')),
                ('drivers', models.ManyToManyField(related_name='applications_team_driver', to='drivers.driver')),
                ('reserve_drivers', models.ManyToManyField(related_name='applications_team_reserve', to='drivers.driver')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='applications_team', to='teams.team')),
            ],
            bases=('events.application',),
        ),
        migrations.CreateModel(
            name='SingleApplication',
            fields=[
                ('application_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='events.application')),
                ('driver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='applications_single', to='drivers.driver')),
            ],
            bases=('events.application',),
        ),
    ]
